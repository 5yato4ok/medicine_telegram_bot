import sys
import logging
import html
import json
import datetime
import os
import traceback
from pathlib import Path
from telegram import *
from telegram.ext import *
from telegram.constants import ParseMode

file = Path(__file__).resolve()  # nopep8
parent, root = file.parent, file.parents[1]  # nopep8
sys.path.append(str(root))  # nopep8

from aid import aid_manager as mngr

try:
    sys.path.remove(str(parent))
except ValueError:  # Already removed
    pass

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)
aids = mngr.Aid()

# signals
AGREE, INIT_KIT, MED_NAME, MED_DATE, \
    MED_BOX, MED_CATEGORY, MED_NUM, \
    IMPORT_CSV, SEARCH_INIT, SEARCH_NAME, SEARCH_CATEGORY, \
    TAKE_NAME, TAKE_NUM, TAKE_FEW = range(14)

# path for import-export files
download_path = os.path.join(os.path.dirname(
    os.path.abspath(__file__)), 'downloads')
file_size_limit = 30 * 1024 * 2024
MSG_MAX_SIZE = 1500
MAX_LINE_BUTTON_LENGTH = 3


def split_by_size(msg, n):
    chunks = [msg[i:i + n] for i in range(0, len(msg), n)]
    return chunks


async def send_big_message(update: Update, msg: str):
    if len(msg) < MSG_MAX_SIZE:
        await update.message.reply_text(msg)
    else:
        parts = split_by_size(msg, MSG_MAX_SIZE - 500)
        for p in parts:
            await update.message.reply_text(p)


def get_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    return context.user_data[chat_id]


async def is_not_initialized(operation_ru: str, operation_en: str, update: Update) -> bool:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to process operation '{operation_en}' in first aid kit without setting current one.")
        await update.message.reply_text(
            text=f"–ß—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é '{operation_ru}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∞–ø—Ç–µ—á–∫–µ. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return True
    return False


def clear_up(update: object, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    chat_id = update.effective_chat.id
    if chat_id not in context.user_data:
        return
    if 'med' in context.user_data[chat_id]:
        del context.user_data[chat_id]['med']
    if 'take' in context.user_data[chat_id]:
        del context.user_data[chat_id]['take']


async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await is_not_initialized("–ø–æ–∏—Å–∫", "search", update):
        return ConversationHandler.END

    reply_keyboard = [
        [
            InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="search_name"),
            InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫–∞—Äc—Ç–≤–∞", callback_data="search_cat")
        ]
    ]

    await update.message.reply_text(f"–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Äc—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.",
                                    reply_markup=InlineKeyboardMarkup(reply_keyboard))
    return SEARCH_INIT


async def list_med(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_not_initialized("–≤—ã–≤–æ–¥ –ª–µ–∫–∞—Ä—Å—Ç–≤", "list med", update):
        return ConversationHandler.END
    meds = aids.get_all_meds()
    msg = ""
    if meds is None:
        msg = "–¢–≤–æ—è –∞–ø—Ç–µ—á–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_med –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"
    else:
        msg_meds = ""
        for m in meds:
            msg_meds += "\n" + mngr.Aid.get_med_msg(m)
        num_of_found = len(meds)
        logger.info(f"Listing all {num_of_found} meds")
        msg = f"–¢–≤–æ—è –∞–ø—Ç–µ—á–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {num_of_found} –ª–µ–∫–∞—Ä—Å—Ç–≤. {msg_meds}"
    await send_big_message(update, msg)
    await help_reply(update, context)
    return ConversationHandler.END


async def list_med_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_not_initialized("–≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤", "list med category", update):
        return ConversationHandler.END
    categories = aids.get_all_categories()
    if categories is None:
        msg = "–¢–≤–æ—è –∞–ø—Ç–µ—á–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤.\n –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_med –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"
    else:
        msg_cat = ""
        for c in categories:
            msg_cat += "\n" + c
        num_of_found = len(categories)
        logger.info(f"Listing all {num_of_found} categories")
        msg = f"–¢–≤–æ—è –∞–ø—Ç–µ—á–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {num_of_found} –∫–∞—Ç–µ–≥–æ—Ä–∏–π. {msg_cat}"
    await send_big_message(update, msg)
    await help_reply(update, context)
    return ConversationHandler.END


async def process_search_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    logger.info(
        f"Attempt to search med with category {category} in first aid kit.")
    meds = aids.get_meds_by_category(category)
    msg = ""
    if meds is not None:
        msg_meds = ""
        for m in meds:
            msg_meds += "\n" + mngr.Aid.get_med_msg(m)
        num_of_found = len(meds)
        logger.info(f"Were found {num_of_found} medicines.")
        msg = f"–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ {num_of_found} –ª–µ–∫–∞—Ä—Å—Ç–≤. {msg_meds}\n" \
              f"–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /take_med"
    else:
        msg = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞"
    await send_big_message(update, msg)
    await help_reply(update, context)
    return ConversationHandler.END


async def process_search_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    logger.info(f"Attempt to search med with name {name} in first aid kit.")
    meds = aids.get_meds_by_name(name)
    msg = ""
    if meds is not None:
        msg_meds = ""
        for m in meds:
            msg_meds += "\n" + mngr.Aid.get_med_msg(m)
        num_of_found = len(meds)
        logger.info(f"Were found {num_of_found} medicines.")
        msg = f"–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ {num_of_found} –ª–µ–∫–∞—Ä—Å—Ç–≤. {msg_meds}\n" \
              f"–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /take_med"
    else:
        msg = f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ {name} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ."

    await update.message.reply_text(msg)
    await help_reply(update, context)
    return ConversationHandler.END


async def dialog_search_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text=f"–í–≤–µ–¥–∏ –∏–º—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.\n –ü—Ä–∏–º–µ—Ä: –ø–µ–Ω—Ç–∞–ª–≥–∏–Ω")
    return SEARCH_NAME


async def dialog_search_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text=f"–í–≤–µ–¥–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n –ü—Ä–∏–º–µ—Ä: –û–†–í–ò")
    return SEARCH_CATEGORY


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [
        [
            InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–ø—Ç–µ—á–∫—É", callback_data="old"),
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–ø—Ç–µ—á–∫—É", callback_data="new")
        ]
    ]

    await update.message.reply_text(
        f"üíä–Ø —Ç–≤–æ–π –±–æ—Ç-–∞–ø—Ç–µ—á–∫–∞. üíä –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–ø—Ç–µ—á–∫–∏ \n\n"
        "–•–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–ø—Ç–µ—á–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?",
        reply_markup=InlineKeyboardMarkup(reply_keyboard)
    )

    return INIT_KIT


AID_CREATE_START, AID_CHOOSE_START, AID_CREATE, AID_CHOOSE = range(4)


async def connect_to_aid(update: Update, context: ContextTypes.DEFAULT_TYPE, aid_name) -> int:
    chat_id = update.effective_chat.id
    aids.connect_to_aid(aid_name, str(chat_id))
    await context.bot.send_message(chat_id=chat_id, reply_markup=ReplyKeyboardRemove(),
                                   text=f"–ò–º—è —Ç–≤–æ–µ–π –∞–ø—Ç–µ—á–∫–∏ <b>{html.escape(aid_name)}</b>", parse_mode=ParseMode.HTML)
    logger.info(f"Setting first aid kit {aid_name} as current one successfuly")

    await help_reply(update, context)
    return ConversationHandler.END


async def init_create_aid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text="–í–≤–µ–¥–∏ –∏–º—è –Ω–æ–≤–æ–π –∞–ø—Ç–µ—á–∫–∏")
    return AID_CREATE


async def process_create_aid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    aid_name = update.message.text
    await connect_to_aid(update, context, aid_name)
    return ConversationHandler.END


async def process_choose_aid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    aid_name = query.data
    aid_name = aid_name.replace('aid_name:', '')
    await connect_to_aid(update, context, aid_name)
    return ConversationHandler.END


async def init_choose_existing_aid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    existing_aids = aids.get_aids(owner=str(update.effective_chat.id))
    if existing_aids is not None:
        res_aids_name = []
        user_aids_line = []
        for x in existing_aids:
            user_aids_line.append(InlineKeyboardButton(text=x['name'], callback_data="aid_name:" + x['name']))
            if len(user_aids_line) >= MAX_LINE_BUTTON_LENGTH:
                res_aids_name.append(user_aids_line)
                user_aids_line = []
        if len(user_aids_line) != 0:
            res_aids_name.append(user_aids_line)
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–ø—Ç–µ—á–µ–∫",
                                                      reply_markup=InlineKeyboardMarkup(res_aids_name))
        return AID_CHOOSE
    else:
        await update.callback_query.edit_message_text("–°–µ–π—á–∞—Å –Ω–µ—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–ø—Ç–µ—á–µ–∫. –í–≤–µ–¥–∏ –∏–º—è –Ω–æ–≤–æ–π –∞–ø—Ç–µ—á–∫–∏")
        return AID_CREATE


async def help_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not aids.is_initialized():
        return

    msg = "‚öôÔ∏è–¢—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –∞–ø—Ç–µ—á–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:‚öôÔ∏è\n" \
          "/delete_aid_kit - —É–¥–∞–ª–∏—Ç—å –∞–ø—Ç–µ—á–∫—É –∏ –≤—Å—ë –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n" \
          "/search - –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –∞–ø—Ç–µ—á–∫–µ\n" \
          "/take_med - –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏\n" \
          "/add_med - –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –∞–ø—Ç–µ—á–∫—É\n" \
          "/list_med - –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ª–µ–∫–∞—Ä—Ç—Å–≤–∞ –∏–∑ –∞–ø—Ç–µ—á–∫–∏\n" \
          "/list_med_category - –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–∑ –∞–ø—Ç–µ—á–∫–∏\n" \
          "/import_csv - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ –∏–∑ csv\n" \
          "/export_csv - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ csv\n" \
          "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É"
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ —Ç–≤–æ–µ–π –∞–ø—Ç–µ—á–∫–µ <i><b>{html.escape(aids.get_cur_aid_name())}</b></i> : "
                                        f"{aids.get_number_of_meds()} \n\n" + msg, parse_mode=ParseMode.HTML)


async def delete_kit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await is_not_initialized("—É–¥–∞–ª–µ–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏", "delete aid kit", update) or update.message is None:
        return ConversationHandler.END
    count = aids.get_number_of_meds()
    kit_name = aids.get_cur_aid_name()

    reply_keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data="delete_yes"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="delete_no")
        ]
    ]

    await update.message.reply_text(
        f"–Ø —Å–æ–±–∏—Ä–∞—é—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ø—Ç–µ—á–∫—É {kit_name}, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n –¢—ã —É–≤–µ—Ä–µ–Ω?",
        reply_markup=InlineKeyboardMarkup(reply_keyboard),
    )

    return AGREE


async def process_delete_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kit_name = aids.get_cur_aid_name()
    aids.delete_cur_aid()
    logger.info("Received confirmation.")
    logger.info(f"Deletion of {kit_name} completed successfuly")
    await update.callback_query.edit_message_text(
        text=f"‚úÖ –ê–ø—Ç–µ—á–∫–∞ {kit_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n–í—ã–∑–æ–≤–∏ –∫–æ–º–Ω–∞–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.")
    return ConversationHandler.END


async def process_delete_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kit_name = aids.get_cur_aid_name()
    logger.info(
        f"Confirmation was not received. Abort deletion of first aid kit")
    await update.callback_query.edit_message_text(
        text=f"‚ùå –ü–æ–¥—Ç–≤—Ç–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ {kit_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await help_reply(update, context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the action conversation.", user.first_name)
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    clear_up(update, context)
    if aids.is_initialized():
        await help_reply(update, context)
    return ConversationHandler.END


async def add_med(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await is_not_initialized("–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤", "add med", update):
        return ConversationHandler.END
    chat_id = update.effective_chat.id
    context.user_data[chat_id] = {'med': {}}
    await update.message.reply_text(f"–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return MED_NAME


async def take_med(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await is_not_initialized("–≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", "take med", update):
        return ConversationHandler.END
    chat_id = update.effective_chat.id
    context.user_data[chat_id] = {'take': {}}
    await update.message.reply_text(f"–í–≤–µ–¥–∏ –∏–º—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å")
    return TAKE_NAME


async def process_take_med_few(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    med_id = None
    med_spl = query.data.split(':')
    if len(med_spl):
        med_id = med_spl[1]
    if med_id is None:
        logger.error("Unexpected input. Abort")
        await update.callback_query.edit_message_text(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        clear_up(update, context)
        return ConversationHandler.END

    get_user_data(update, context)['take']['old_med'] = aids.get_med_by_id(med_id)
    await update.callback_query.edit_message_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return TAKE_NUM


async def process_take_med_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    meds = aids.get_meds_by_name(update.message.text)

    if meds is None:
        logger.error(
            f"Take medicine: medicine with name {update.message.text} were not found")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å –∏–º–µ–Ω–µ–º {update.message.text} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ")
        clear_up(update, context)
        await help_reply(update, context)
        return ConversationHandler.END
    if len(meds) == 1:
        logger.info(
            f"Take medicine: were found only one med for name {update.message.text}")
        get_user_data(update, context)['take']['old_med'] = meds[0]
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
        return TAKE_NUM

    logger.info(
        f"Take medicine: were found few meds for name {update.message.text}")
    full_choices = []
    choices_line = []
    for m in meds:
        choices_line.append(InlineKeyboardButton(mngr.Aid.get_med_msg(m), callback_data=f"take_few:{m['id']}"))
        if len(choices_line) >= MAX_LINE_BUTTON_LENGTH:
            full_choices.append(choices_line)
            choices_line = []
    if len(choices_line):
        full_choices.append(choices_line)

    await update.message.reply_text(
        f"‚ÑπÔ∏è –ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –∏–º–µ–Ω–µ–º {update.message.text}. \n –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö",
        reply_markup=InlineKeyboardMarkup(full_choices)
    )

    return TAKE_FEW


async def process_take_med_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    med_desc = get_user_data(update, context)['take']
    try:
        med_desc['new_quantity'] = float(update.message.text)
    except:
        logger.error(f"Incorrect format of quantity")
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ —á–∏—Å–ª–æ.")
        return MED_NUM

    old_med = med_desc['old_med']
    msg = ""
    if old_med is not None:
        logger.info(
            f"Attempt to reduce medicine {old_med['id']} on quantity {med_desc['new_quantity']}")
        aids.reduce_med(med_desc['new_quantity'], old_med)

        new_med = aids.get_med_by_id(old_med['id'])
        msg = "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ.\n"
        if new_med is None:
            msg += "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª–æ –≤–∑—è—Ç–æ –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
        else:
            msg += "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:" + \
                   mngr.Aid.get_med_msg(new_med)
    else:
        logger.error('Incorrect medicine were found')
        msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    await update.message.reply_text(msg)
    clear_up(update, context)
    await help_reply(update, context)
    return ConversationHandler.END


async def process_med_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    get_user_data(update, context)['med']['name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return MED_NUM


async def process_med_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        get_user_data(update, context)['med']['valid'] = datetime.datetime.strptime(
            update.message.text, '%m/%Y')
    except Exception as e:
        logger.error(f"Incorrect format of date. Exception: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: mm/yyyy")
        return MED_DATE

    cur_med = get_user_data(update, context)['med']
    id = aids.add_med(name=cur_med['name'], quantity=cur_med['quantity'],
                      category=cur_med['category'], box=cur_med['box'], valid_date=cur_med['valid'])
    logger.info(f"Created medicine {cur_med} with id {id}")

    await update.message.reply_text("‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:\n" + mngr.Aid.get_med_msg(aids.get_med_by_id(id)))

    await help_reply(update, context)
    clear_up(update, context)
    return ConversationHandler.END


async def process_med_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    get_user_data(update, context)['med']['box'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ—Ç —á–µ–≥–æ –¥–∞–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.")
    return MED_CATEGORY


async def process_med_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    get_user_data(update, context)['med']['category'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: mm/yyyy")
    return MED_DATE


async def process_med_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        get_user_data(update, context)[
            'med']['quantity'] = float(update.message.text)
    except:
        logger.error(f"Incorrect format of quantity")
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ —á–∏—Å–ª–æ.")
        return MED_NUM
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return MED_BOX


async def import_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await is_not_initialized("–∏–º–ø–æ—Ä—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–∑ csv", "import meds", update):
        return ConversationHandler.END
    await update.message.reply_text(
        f"–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞. –î–æ–±–∞–≤—å –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª csv –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç\n"
        "–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤  CSV —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ,–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏,–û—Ç —á–µ–≥–æ,–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: mm/yyyy\n"
        "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–∞–∫—Å–∏–º—É–º 20mb\n"
    )

    if not os.path.exists(download_path):
        os.mkdir(download_path)
    return IMPORT_CSV


async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await is_not_initialized("—ç–∫—Å–ø–æ—Ä—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–∑ csv", "export meds", update):
        return ConversationHandler.END

    if not os.path.exists(download_path):
        os.mkdir(download_path)

    user = update.message.from_user
    file_path = os.path.join(download_path, f"{user.id}.csv")
    if os.path.exists(file_path):
        os.remove(file_path)

    aids.export_aid_to_csv(file_path)
    await context.bot.send_document(chat_id=update.effective_chat.id, document=file_path)
    await help_reply(update, context)


async def process_import(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    file_path = os.path.join(download_path, f"{user.id}.csv")

    if update.message.document.file_size >= file_size_limit:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 20–º–±.")
        logger.error(
            f'Attempt to load file too big from user {user.first_name}. Document description: {update.message.document}')
        return ConversationHandler.END
    doc_file = await update.message.document.get_file()
    await doc_file.download_to_drive(file_path)
    logger.info(
        f"Loaded file {update.message.document} from user {user.first_name} successfuly")
    imp_meds = aids.import_aid_from_csv(file_path)
    os.remove(file_path)

    await update.message.reply_text(f"‚úÖ –ë—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(imp_meds)} –ª–µ–∫–∞—Ä—Å—Ç–≤")

    await help_reply(update, context)
    return ConversationHandler.END


def init_handlers(app):
    init_aid_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INIT_KIT: [
                CallbackQueryHandler(init_create_aid, pattern="^new$"),
                CallbackQueryHandler(init_choose_existing_aid, pattern="^old$")
            ],
            AID_CHOOSE: [CallbackQueryHandler(process_choose_aid, pattern="^aid_name:.*")],
            AID_CREATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_create_aid)]
        },
        fallbacks=[CommandHandler("start", start)]
    )
    app.add_handler(init_aid_handler)

    delete_aid_handler = ConversationHandler(
        entry_points=[CommandHandler("delete_aid_kit", delete_kit)],
        states={
            AGREE: [CallbackQueryHandler(process_delete_yes, pattern="^delete_yes$"),
                    CallbackQueryHandler(process_delete_no, pattern="^delete_no$")]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(delete_aid_handler)

    add_med_handler = ConversationHandler(
        entry_points=[CommandHandler("add_med", add_med)],
        states={
            MED_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_name)],
            MED_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_date)],
            MED_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_category)],
            MED_BOX: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_box)],
            MED_NUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_quantity)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(add_med_handler)

    import_csv_handler = ConversationHandler(
        entry_points=[CommandHandler("import_csv", import_entry)],
        states={IMPORT_CSV: [MessageHandler(
            filters.Document.FileExtension("csv"), process_import)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(import_csv_handler)
    app.add_handler(CommandHandler("export_csv", export_csv))
    app.add_handler(CommandHandler("list_med", list_med))
    app.add_handler(CommandHandler("list_med_category", list_med_category))

    search_med_handler = ConversationHandler(
        entry_points=[CommandHandler("search", search)],
        states={
            SEARCH_INIT: [CallbackQueryHandler(dialog_search_name, pattern="^search_name$"),
                          CallbackQueryHandler(dialog_search_category, pattern="^search_cat$")],
            SEARCH_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_by_name)],
            SEARCH_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_by_category)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(search_med_handler)

    take_med_handler = ConversationHandler(
        entry_points=[CommandHandler("take_med", take_med)],
        states={
            TAKE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_take_med_name)],
            TAKE_NUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_take_med_quantity)],
            TAKE_FEW: [CallbackQueryHandler(process_take_med_few, pattern="^take_few:.*")]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(take_med_handler)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:",
                 exc_info=context.error)

    # clearing up the user data
    clear_up(update, context)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    # You might need to add some logic to deal with messages longer than the 4096 character limit.
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}"
        "</pre>\n\n"
        f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
        f"<pre>{html.escape(tb_string)}</pre>"
    )

    # Finally, send the message
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode=ParseMode.HTML)


if __name__ == '__main__':
    # TODO: move token to secure place
    real = '5898027021:AAG-et5fU_5nONWeaFjkbdbtDSTSqi0G_50'
    test = '6080292253:AAHlt5TQojPiEKEz8bI4A7CU6F7BPqPPWRE'
    app = ApplicationBuilder().token(test).build()
    init_handlers(app)
    app.add_error_handler(error_handler)
    app.run_polling()
