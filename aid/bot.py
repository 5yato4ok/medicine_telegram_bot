import sys
import logging
import html
import json
import datetime
import os
import traceback
from pathlib import Path
from telegram import *
from telegram.ext import *
from telegram.constants import ParseMode
file = Path(__file__).resolve()  # nopep8
parent, root = file.parent, file.parents[1]  # nopep8
sys.path.append(str(root))  # nopep8

from aid import aid_manager as mngr

try:
    sys.path.remove(str(parent))
except ValueError:  # Already removed
    pass


logging.basicConfig(
    format='Telegramm Bot: %(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)
aids = mngr.Aid()

# signals
AGREE, INIT_KIT, MED_NAME, MED_DATE, \
    MED_BOX, MED_CATEGORY, MED_NUM, \
    IMPORT_CSV, SEARCH_INIT, SEARCH_NAME, SEARCH_CATEGORY, \
    TAKE_NAME, TAKE_NUM, TAKE_DATE, TAKE_BOX = range(15)

# path for import-export files
download_path = os.path.join(os.path.dirname(
    os.path.abspath(__file__)), 'downloads')
file_size_limit = 30*1024*2024


async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to search in first aid kit without setting current one.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –≤ –∞–ø—Ç–µ—á–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –Ω–µ–π. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    reply_keyboard = [["–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫–∞—Ä—Ç—Å–≤–∞"]]
    await update.message.reply_text(
        f"–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Ç—Å–≤–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ"
        ),
    )
    return SEARCH_INIT


async def list_med(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not aids.is_initialized():
        logger.error(
            f"Attempt to list in first aid kit without setting current one.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –∞–ø—Ç–µ—á–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –Ω–µ–π. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    meds = aids.get_all_meds()
    msg_meds = ""
    for m in meds:
        msg_meds += "\n" + mngr.Aid.get_med_msg(m)
    num_of_found = len(meds)
    logger.info(f"Listing all {num_of_found} meds")
    await update.message.reply_text(f"–¢–≤–æ—è –∞–ø—Ç–µ—á–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {num_of_found} –ª–µ–∫–∞—Ä—Å—Ç–≤. {msg_meds}")


async def list_med_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not aids.is_initialized():
        logger.error(
            f"Attempt to list in first aid kit without setting current one.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –∞–ø—Ç–µ—á–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –Ω–µ–π. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    categories = aids.get_all_categories()
    msg_cat = ""
    for c in categories:
        msg_cat += "\n" + c
    num_of_found = len(categories)
    logger.info(f"Listing all {num_of_found} categories")
    await update.message.reply_text(f"–¢–≤–æ—è –∞–ø—Ç–µ—á–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {num_of_found} –∫–∞—Ç–µ–≥–æ—Ä–∏–π. {msg_cat}")


async def process_search_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    logger.info(
        f"Attempt to search med with category {category} in first aid kit.")
    meds = aids.get_meds_by_category(category)
    msg_meds = ""
    for m in meds:
        msg_meds += "\n" + mngr.Aid.get_med_msg(m)
    num_of_found = len(meds)
    logger.info(f"Were found {num_of_found} medicines: {msg_meds}")
    await update.message.reply_text(f"–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ {num_of_found} –ª–µ–∫–∞—Ä—Å—Ç–≤. {msg_meds}")
    if num_of_found:
        await update.message.reply_text(f"–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \n"
                                        f"/take_medicine <–∏–º—è_–ª–µ–∫–∞—Ä—Å—Ç–≤–∞>")
    await help_reply(update, context)
    return ConversationHandler.END


async def process_search_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    logger.info(f"Attempt to search med with name {name} in first aid kit.")
    meds = aids.get_meds_by_name(name)
    msg_meds = ""
    for m in meds:
        msg_meds += "\n" + mngr.Aid.get_med_msg(m)
    num_of_found = len(meds)
    logger.info(f"Were found {num_of_found} medicines: {msg_meds}")
    await update.message.reply_text(f"–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ {num_of_found} –ª–µ–∫–∞—Ä—Å—Ç–≤. {msg_meds}")
    if num_of_found:
        await update.message.reply_text(f"–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \n"
                                        f"/take_medicine {name}")
    await help_reply(update, context)
    return ConversationHandler.END


async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    search_by_name = "–∏–º–µ–Ω–∏" in update.message.text.lower()
    if search_by_name:
        await context.bot.send_message(chat_id=update.effective_chat.id, reply_markup=ReplyKeyboardRemove(),
                                       text=f"–í–≤–µ–¥–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n –ü—Ä–∏–º–µ—Ä: –û–†–í–ò")
        return SEARCH_NAME
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, reply_markup=ReplyKeyboardRemove(),
                                       text=f"–í–≤–µ–¥–∏ –∏–º—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.\n –ü—Ä–∏–º–µ—Ä: –ø–µ–Ω—Ç–∞–ª–≥–∏–Ω")
        await SEARCH_CATEGORY


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [
        ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–ø—Ç–µ—á–∫—É", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–ø—Ç–µ—á–∫—É"]]

    await update.message.reply_text(
        f"üíä–Ø —Ç–≤–æ–π –±–æ—Ç-–∞–ø—Ç–µ—á–∫–∞. üíä –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–ø—Ç–µ—á–∫–∏ \n\n"
        "–•–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–ø—Ç–µ—á–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ"
        ),
    )

    return INIT_KIT


async def process_init_aid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    use_existing_one = "—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é" in update.message.text.lower()
    msg = ""
    if use_existing_one:
        existing_aids = aids.get_aids()
        if existing_aids is not None:
            msg = "–°–µ–π—á–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞–ø—Ç–µ—á–∫–∏:"
            for x in existing_aids:
                msg += "\n    " + x['name']
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, reply_markup=ReplyKeyboardRemove(),
                                           text=f"–°–µ–π—á–∞—Å –Ω–µ—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–ø—Ç–µ—á–µ–∫. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é")
    await context.bot.send_message(chat_id=update.effective_chat.id,  reply_markup=ReplyKeyboardRemove(),
                                   text=msg + f"\n\n–í—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É /aid_kit <–∏–º—è_–∞–ø—Ç–µ—á–∫–∏> –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —Å–≤–æ–µ–π –∞–ø—Ç–µ—á–∫–µ.\n –ü—Ä–∏–º–µ—Ä:\n /aid_kit –∏–º—è123")
    return ConversationHandler.END


async def help_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not aids.is_initialized():
        return

    msg = "‚öôÔ∏è–¢—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –∞–ø—Ç–µ—á–∫–æ–π, –∏—Å–æ–ø–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:‚öôÔ∏è\n"\
        "/delete_aid_kit - —É–¥–∞–ª–∏—Ç—å –∞–ø—Ç–µ—á–∫—É –∏ –≤—Å—ë –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"\
        "/search - –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –∞–ø—Ç–µ—á–∫–µ\n"\
        "/take_med - –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏\n"\
        "/add_med - –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –∞–ø—Ç–µ—á–∫—É\n"\
        "/list_med - –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ª–µ–∫–∞—Ä—Ç—Å–≤–∞ –∏–∑ –∞–ø—Ç–µ—á–∫–∏\n"\
        "/list_med_category - –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–∑ –∞–ø—Ç–µ—á–∫–∏\n"\
        "/import_csv - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ –∏–∑ csv\n"\
        "/export_csv - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ csv\n"
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ —Ç–≤–æ–æ–µ–π –∞–ø—Ç–µ—á–∫–µ <i><b>{html.escape(aids.get_cur_aid_name())}</b></i> : "
                                   f"{aids.get_number_of_meds()} \n\n" + msg, parse_mode=ParseMode.HTML)


async def choose_aid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    message = update.message.text
    aid_name = message.split()
    if len(aid_name) != 2:
        logger.error("Sent incorect arg to /aid_kit")
        await context.bot.send_message(chat_id=update.effective_chat.id, reply_markup=ReplyKeyboardRemove(),
                                       text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /aid_kit <–∏–º—è_–∞–ø—Ç–µ—á–∫–∏>")
    aid_name = aid_name[1]
    aids.set_current_aid(aid_name)
    await context.bot.send_message(chat_id=update.effective_chat.id, reply_markup=ReplyKeyboardRemove(),
                                   text=f"–ò–º—è —Ç–≤–æ–µ–π –∞–ø—Ç–µ—á–∫–∏ <b>{html.escape(aid_name)}</b>", parse_mode=ParseMode.HTML)
    logger.info(f"Setting first aid kit {aid_name} as current one successfuly")

    await help_reply(update, context)


async def delete_kit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to delete first aid kit without setting current one.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–ø—Ç–µ—á–∫—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –Ω–µ–π. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    count = aids.get_number_of_meds()
    kit_name = aids.get_cur_aid_name()

    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]

    await update.message.reply_text(
        f"–Ø —Å–æ–±–∏—Ä–∞—é—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ø—Ç–µ—á–∫—É {kit_name}, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n –¢—ã —É–≤–µ—Ä–µ–Ω?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–¢—ã —É–≤–µ—Ä–µ–Ω?"
        ),
    )

    return AGREE


async def process_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    decision = update.message.text
    kit_name = aids.get_cur_aid_name()
    if decision.lower() == "–¥–∞":
        aids.delete_cur_aid()
        logger.info("Received confirmation.")
        logger.info(f"Deletion of {kit_name} completed successfuly")
        await update.message.reply_text(
            text=f"‚úÖ –ê–ø—Ç–µ—á–∫–∞ {kit_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n–í—ã–∑–æ–≤–∏ –∫–æ–º–Ω–∞–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.",
            reply_markup=ReplyKeyboardRemove())
    else:
        logger.info(
            f"Confirmation was not received. Abort deletion of first aid kit")
        await update.message.reply_text(
            text=f"‚ùå –ü–æ–¥—Ç–≤—Ç–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ {kit_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove())
        await help_reply(update, context)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the action conversation.", user.first_name)
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )

    if aids.is_initialized():
        await help_reply(update, context)
    return ConversationHandler.END


async def add_med(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to add medicine without setting current first aid kit.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∞–ø—Ç–µ—á–∫–µ. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    user = update.message.from_user['id']
    context.user_data[user] = {'med': {}}
    await update.message.reply_text(
        f"–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
    )
    return MED_NAME


async def take_med(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to take medicine in first aid kit without setting current one.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –Ω–µ–π. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    user = update.message.from_user['id']
    context.user_data[user] = {'take': {}}
    await update.message.reply_text(f"–í–≤–µ–¥–∏ –∏–º—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å")
    return TAKE_NAME


async def take_med_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    try:
        context.user_data[user]['take']['expected_date'] = datetime.datetime.strptime(
            update.message.text, '%m/%Y')
    except Exception as e:
        logger.error(f"Incorrect format of date. Exception: {e}")
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: mm/yyyy")
        return TAKE_DATE

    has_such_date = False
    existed_dates = ""
    found_med = None
    for m in context.user_data[user]['take']['meds']:
        existed_dates += "\n" + m['valid_date'].strftime('%m/%Y')
        if m['valid_date'] == context.user_data[user]['take']['expected_date']:
            has_such_date = True
            found_med = m
            break

    if not has_such_date:
        logger.error(f"Found meds doesnot contain provided date.")
        await update.message.reply_text(f"‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Å—Ä–æ–∫—É –≥–æ–¥–Ω–æ—Å—Ç–∏ {update.message.text}\n"
                                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –æ–¥–Ω–∏ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:{existed_dates}")
        return TAKE_DATE

    if 'check_box' in context.user_data[user]['take']:
        await update.message.reply_text(f"–í–≤–µ–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å")
        return TAKE_BOX

    del context.user_data[user]['take']['check_date']
    context.user_data[user]['take']['old_med'] = found_med
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return TAKE_NUM


async def take_med_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    context.user_data[user]['take']['expected_box'] = update.message.text

    has_such_box = False
    has_such_date = 'expected_date' not in context.user_data[user]['take']
    existed_dates = ""
    existed_box = ""
    found_med = None
    for m in context.user_data[user]['take']['meds']:
        existed_box += "\n" + m['box']
        existed_dates += "\n" + m['valid_date'].strftime('%m/%Y')
        if m['box'] == context.user_data[user]['take']['expected_box']:
            has_such_box = True
            if 'expected_date' in context.user_data[user]['take'] \
                    and m['valid_date'] == context.user_data[user]['take']['expected_date']:
                has_such_date = True
                found_med = m
                break
    if found_med is None:
        logger.error(
            f"Were provided incorrect input. Meds has provided box: {has_such_box} and has providied date:{has_such_date}")
        if not has_such_box:
            await update.message.reply_text(f"‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é {update.message.text}\n"
                                            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:{existed_box}")
            return TAKE_BOX
        if not has_such_date:
            date_msg = context.user_data[user]['take']['expected_date'].strftime('%m/%Y')
            await update.message.reply_text(f"‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤–≤–µ–¥–µ–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è {update.message.text} –∏ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ {date_msg}\n"
                                            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –æ–¥–Ω–∏ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:{existed_dates}")
                                            
            return TAKE_DATE
    del context.user_data[user]['take']['check_box']
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return TAKE_NUM


async def process_take_med_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    meds = aids.get_meds_by_name(update.message.text)

    if meds is None:
        logger.error(
            f"Take medicine: medicine with name {update.message.text} were not found")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å –∏–º–µ–Ω–µ–º {update.message.text} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ")
        await help_reply(update, context)
        return ConversationHandler.END
    if len(meds) == 1:
        logger.info(
            f"Take medicine: were found only one med for name {update.message.text}")
        context.user_data[user]['take']['old_med'] = meds[0]
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
        return TAKE_NUM

    logger.info(
        f"Take medicine: were found only few meds for name {update.message.text}")
    msg_meds = ""
    meds_date = set()
    meds_box = set()
    for m in meds:
        msg_meds += "\n" + mngr.Aid.get_med_msg(m)
        meds_date.add(m['valid_date'])
        meds_box.add(m['box'])
    context.user_data[user]['take']['meds'] = meds
    msg = f"‚ÑπÔ∏è –ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –∏–º–µ–Ω–µ–º {update.message.text}. \n"
    if len(meds_date) > 1:
        context.user_data[user]['take']['check_date'] = True
        msg += "‚è≤Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —Ä–∞–∑–Ω—ã–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏.\n"

    if len(meds_box) > 1:
        context.user_data[user]['take']['check_box'] = True
        msg += "üíº –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —Ä–∞–∑–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n"

    msg += f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {msg_meds}\n"
    if 'check_date' in context.user_data[user]['take']:
        msg += f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ {update.message.text}."
        await update.message.reply_text(text=msg)
        return TAKE_DATE

    if 'check_box' in context.user_data[user]['take']:
        msg += f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ {update.message.text}."
        await update.message.reply_text(text=msg)
        return TAKE_BOX
    msg += "‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
    await update.message.reply_text(text=msg)
    return ConversationHandler.END


async def process_take_med_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    try:
        context.user_data[user]['take']['new_quantity'] = float(
            update.message.text)
    except:
        logger.error(f"Incorrect format of quantity")
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ —á–∏—Å–ª–æ.")
        return MED_NUM

    med_desc = context.user_data[user]['take']
    logger.info(
        f"Attempt to reduce medicine {med_desc['old_med']['id']} on quantity {med_desc['new_quantity']}")
    aids.reduce_med(med_desc['quantity'], med_desc['old_med'])

    new_med = aids.get_med_by_id(med_desc['old_med']['id'])
    msg = "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ.\n"
    if new_med is None:
        msg += "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–ø—Ç–µ—á–∫–∏, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª–æ –≤–∑—è—Ç–æ –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
    else:
        msg += "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:" + mngr.Aid.get_med_msg(new_med)
    await update.message.reply_text(msg)
    return ConversationHandler.END


async def process_med_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    context.user_data[user]['med']['name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return MED_NUM


async def process_med_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    try:
        context.user_data[user]['med']['valid_date'] = datetime.datetime.strptime(
            update.message.text, '%m/%Y')
    except Exception as e:
        logger.error(f"Incorrect format of date. Exception: {e}")
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: mm/yyyy")
        return MED_DATE
    cur_med = context.user_data[user]['med']
    id = aids.add_med(name=cur_med['name'], quantity=cur_med['quantity'],
                      category=cur_med['category'], box=cur_med['box'], valid_date=cur_med['valid_date'])
    logger.info(f"Created medicine {cur_med} with id {id}")
    await update.message.reply_text("‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:\n" + mngr.Aid.get_med_msg(cur_med))
    await help_reply(update, context)
    return ConversationHandler.END


async def process_med_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    context.user_data[user]['med']['box'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ—Ç —á–µ–≥–æ –¥–∞–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.")
    return MED_CATEGORY


async def process_med_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    context.user_data[user]['med']['category'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: mm/yyyy")
    return MED_DATE


async def process_med_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user['id']
    try:
        context.user_data[user]['med']['quantity'] = float(update.message.text)
    except:
        logger.error(f"Incorrect format of quantity")
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ —á–∏—Å–ª–æ.")
        return MED_NUM
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    return MED_BOX


async def import_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to import medicines without setting current first aid kit.")
        await update.message.reply_text(text="–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ csv —Ñ–∞–π–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∞–ø—Ç–µ—á–∫–µ. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        return ConversationHandler.END
    await update.message.reply_text(
        f"–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞. –î–æ–±–∞–≤—å –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª csv, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç"
        "–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤  CSV —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ,–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏,–û—Ç —á–µ–≥–æ,–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: mm/yyyy"
        "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–∞–∫—Å–∏–º—É–º 20mb"
    )

    if not os.path.exists(download_path):
        os.mkdir(download_path)
    return IMPORT_CSV


async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not aids.is_initialized():
        logger.error(
            f"Attempt to export medicines without setting current first aid kit.")
        await update.message.reply_text(text="–ß—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ –∞–ø—Ç–µ—á–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∞–ø—Ç–µ—á–∫–µ. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start")
        return

    if not os.path.exists(download_path):
        os.mkdir(download_path)

    user = update.message.from_user
    file_path = os.path.join(download_path, f"{user.id}.csv")
    if os.path.exists(file_path):
        os.remove(file_path)

    aids.export_aid_to_csv(file_path)
    await context.bot.send_document(chat_id=update.effective_chat.id, document=file_path)
    await help_reply(update, context)


async def process_import(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    file_path = os.path.join(download_path, f"{user.id}.csv")

    if update.message.document.file_size >= file_size_limit:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 20–º–±.")
        logger.error(
            f'Attempt to load file too big from user {user.first_name}. Document description: {update.message.document}')
        return ConversationHandler.END
    doc_file = await update.message.document.get_file()
    await doc_file.download_to_drive(file_path)
    logger.info(
        f"Loaded file {update.message.document} from user {user.first_name} successfuly")
    imp_meds = aids.import_aid_from_csv(file_path)
    os.remove(file_path)

    await update.message.reply_text(f"‚úÖ –ë—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(imp_meds)} –ª–µ–∫–∞—Ä—Å—Ç–≤")

    await help_reply(update, context)
    return ConversationHandler.END


def init_handlers(app):
    init_aid_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INIT_KIT: [MessageHandler(filters.Regex(
                "^(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–ø—Ç–µ—á–∫—É|–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–ø—Ç–µ—á–∫—É)$"), process_init_aid)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("aid_kit", choose_aid))
    app.add_handler(init_aid_handler)

    delete_aid_handler = ConversationHandler(
        entry_points=[CommandHandler("delete_aid_kit", delete_kit)],
        states={
            AGREE: [MessageHandler(filters.Regex(
                "^(–î–∞|–ù–µ—Ç|–¥–∞|–Ω–µ—Ç)$"), process_delete)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(delete_aid_handler)

    add_med_handler = ConversationHandler(
        entry_points=[CommandHandler("add_med", add_med)],
        states={
            MED_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_name)],
            MED_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_date)],
            MED_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_category)],
            MED_BOX: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_box)],
            MED_NUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_med_quantity)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(add_med_handler)

    import_csv_handler = ConversationHandler(
        entry_points=[CommandHandler("import_csv", import_entry)],
        states={IMPORT_CSV: [MessageHandler(
            filters.Document.FileExtension("csv"), process_import)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(import_csv_handler)
    app.add_handler(CommandHandler("export_csv", export_csv))
    app.add_handler(CommandHandler("list_med", list_med))
    app.add_handler(CommandHandler("list_med_category", list_med_category))

    search_med_handler = ConversationHandler(
        entry_points=[CommandHandler("search", search)],
        states={
            SEARCH_INIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_search)],
            SEARCH_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_by_name)],
            SEARCH_CATEGORY: [MessageHandler(
                filters.TEXT & ~filters.COMMAND, process_search_by_category)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(search_med_handler)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:",
                 exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    # You might need to add some logic to deal with messages longer than the 4096 character limit.
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}"
        "</pre>\n\n"
        f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
        f"<pre>{html.escape(tb_string)}</pre>"
    )

    # Finally, send the message
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode=ParseMode.HTML)


if __name__ == '__main__':
    # TODO: move token to secure place
    app = ApplicationBuilder().token(
        '5898027021:AAG-et5fU_5nONWeaFjkbdbtDSTSqi0G_50').build()
    init_handlers(app)
    app.add_error_handler(error_handler)
    app.run_polling()
